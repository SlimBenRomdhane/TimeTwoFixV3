@model TimeTwoFix.Web.Models.ProviderSparePartModels.BulkProviderSparePartViewModel

@{
    ViewData["Title"] = "Receive Spare Parts";
}

<h2 class="mb-4">Receive Spare Parts from Provider</h2>

<form asp-action="CreateBulk" method="post">
    <input type="hidden" asp-for="ProviderId" />

    <div class="mb-3">
        <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#sparePartModal">
            <i class="bi bi-search"></i> Add Spare Part
        </button>
    </div>

    <table class="table table-bordered align-middle">
        <thead class="table-light">
            <tr>
                <th>Spare Part</th>
                <th>Delivery Receipt</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Discount</th>
                <th>VAT</th>
                <th>Margin</th>
                <th>Date Received</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="sparePartRows">
            @for (int i = 0; i < Model.SpareParts.Count; i++)
            {
                <tr>
                    <td>
                        <input type="hidden" asp-for="SpareParts[@i].SparePartId" />
                        <input type="text" class="form-control" value="@Model.SpareParts[i].SparePartId" readonly />
                    </td>
                    <td><input asp-for="SpareParts[@i].DeliveryReceipt" class="form-control" /></td>
                    <td><input asp-for="SpareParts[@i].QuantityReceived" class="form-control" /></td>
                    <td><input asp-for="SpareParts[@i].UnitPriceAtPurchase" class="form-control" /></td>
                    <td><input asp-for="SpareParts[@i].Discount" class="form-control" /></td>
                    <td><input asp-for="SpareParts[@i].VAT" class="form-control" /></td>
                    <td><input asp-for="SpareParts[@i].Margin" class="form-control" /></td>
                    <td><input asp-for="SpareParts[@i].DateReceived" class="form-control" type="date" /></td>
                    <td>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeRow(this)">🗑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-grid mt-4">
        <button type="submit" class="btn btn-success btn-lg">
            <i class="bi bi-box-arrow-in-down me-2"></i> Receive All
        </button>
        <a asp-action="Index" class="btn btn-outline-secondary btn-lg mt-2">
            <i class="bi bi-arrow-left-circle me-2"></i> Back to Provider List
        </a>
    </div>
</form>

<!-- Modal for selecting spare parts -->
<div class="modal fade" id="sparePartModal" tabindex="-1" aria-labelledby="sparePartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sparePartModalLabel">Search Spare Parts</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="sparePartSearchInput" class="form-control" placeholder="Type spare part name..." />
                <div id="sparePartResults" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let rowIndex = @Model.SpareParts.Count;

        function addSparePartRow(sparePartId, sparePartName) {
            const tbody = document.getElementById("sparePartRows");

            const row = document.createElement("tr");
            row.innerHTML = `
                <td>
                    <input type="hidden" name="SpareParts[${rowIndex}].SparePartId" value="${sparePartId}" />
                    <input type="text" class="form-control" value="${sparePartName}" readonly />
                </td>
                <td><input name="SpareParts[${rowIndex}].DeliveryReceipt" class="form-control" /></td>
                <td><input name="SpareParts[${rowIndex}].QuantityReceived" class="form-control" /></td>
                <td><input name="SpareParts[${rowIndex}].UnitPriceAtPurchase" class="form-control" /></td>
                <td><input name="SpareParts[${rowIndex}].Discount" class="form-control" /></td>
                <td><input name="SpareParts[${rowIndex}].VAT" class="form-control" /></td>
                <td><input name="SpareParts[${rowIndex}].Margin" class="form-control" /></td>
                <td><input name="SpareParts[${rowIndex}].DateReceived" class="form-control" type="date" /></td>
                <td>
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeRow(this)">🗑️</button>
                </td>
            `;
            tbody.appendChild(row);
            rowIndex++;
        }

        function removeRow(button) {
            button.closest("tr").remove();
        }

        function setupSmartSearch(inputId, resultsId, endpoint, onSelect) {
            let debounceTimer;
            document.getElementById(inputId).addEventListener("input", function () {
                clearTimeout(debounceTimer);
                const term = this.value.trim();
                if (term.length < 2) return;

                debounceTimer = setTimeout(async () => {
                    const container = document.getElementById(resultsId);
                    container.innerHTML = `<div class="text-muted">Searching...</div>`;
                    try {
                        const response = await fetch(`${endpoint}?term=${encodeURIComponent(term)}`);
                        const results = await response.json();
                        container.innerHTML = "";

                        if (!Array.isArray(results) || results.length === 0) {
                            container.innerHTML = `<div class="alert alert-warning">No results for "<strong>${term}</strong>".</div>`;
                            return;
                        }

                        results.forEach(item => {
                            const btn = document.createElement("button");
                            btn.className = "btn btn-outline-primary mb-2 w-100 text-start";
                            btn.textContent = item.name;
                            btn.onclick = () => onSelect(item);
                            container.appendChild(btn);
                        });
                    } catch (error) {
                        container.innerHTML = `<div class="alert alert-danger">Search failed. Try again.</div>`;
                        console.error(error);
                    }
                }, 300);
            });
        }

        setupSmartSearch("sparePartSearchInput", "sparePartResults", "/SparePart/SearchSpareParts", item => {
            addSparePartRow(item.id, item.name);
            bootstrap.Modal.getInstance(document.getElementById("sparePartModal")).hide();
        });
    </script>
}