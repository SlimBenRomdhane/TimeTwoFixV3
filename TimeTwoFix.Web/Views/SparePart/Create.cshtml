@model TimeTwoFix.Web.Models.SparePartModels.CreateSparePartViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>CreateSparePartViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @* <div class="form-group">
                <label asp-for="SparePartCategoryId" class="control-label">Category</label>
                <select asp-for="SparePartCategoryId" class="form-control" asp-items="ViewBag.Categories">
                    <option value="">-- Select Category --</option>
                </select>
                <span asp-validation-for="SparePartCategoryId" class="text-danger"></span>
            </div> *@
            <div class="form-group">
                <label for="SelectedCategoryName" class="control-label">Category</label>
                <div class="input-group">
                    <!-- Display selected category name -->
                    <input type="text" id="SelectedCategoryName" class="form-control" placeholder="No category selected" readonly />

                    <!-- Hidden field to store selected category ID -->
                    <input type="hidden" asp-for="SparePartCategoryId" id="SparePartCategoryId" />

                    <!-- Trigger modal for category search -->
                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#categoryModal">
                        🔍 Search
                    </button>
                </div>
                <span asp-validation-for="SparePartCategoryId" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="PartCode" class="control-label"></label>
                <input asp-for="PartCode" class="form-control" />
                <span asp-validation-for="PartCode" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<!-- Category Search Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalLabel">Search Categories</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <input type="text" id="categorySearchInput" class="form-control" placeholder="Type to search..." />

                <div id="categoryResults" class="mt-3">
                    <!-- AJAX-loaded category buttons will appear here -->
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
                let debounceTimer;

        document.getElementById("categorySearchInput").addEventListener("input", function () {
            clearTimeout(debounceTimer);

            const term = this.value;
            if (term.length < 2) return;

            debounceTimer = setTimeout(async () => {
                const response = await fetch(`/SparePart/SearchCategories?term=${encodeURIComponent(term)}`);
                const results = await response.json();

                const container = document.getElementById("categoryResults");
                container.innerHTML = "";

                results.forEach(c => {
                    const btn = document.createElement("button");
                    btn.className = "btn btn-outline-primary mb-2 w-100 text-start";
                    btn.textContent = `${c.name} ${c.description ? `– ${c.description}` : ""}`;
                    btn.onclick = () => {
                        document.getElementById("SparePartCategoryId").value = c.id;
                        document.getElementById("SelectedCategoryName").value = c.name;
                        bootstrap.Modal.getInstance(document.getElementById("categoryModal")).hide();
                    };
                    container.appendChild(btn);
                });
            }, 300); // Wait 300ms after typing stops
        });
    </script>
}
