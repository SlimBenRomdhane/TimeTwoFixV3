@model TimeTwoFix.Web.Models.SparePartModels.UpdateSparePartViewModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>UpdateSparePartViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label class="control-label">Spare Part Category</label>
                <div class="input-group">
                    <input type="text" id="SelectedCategoryName" class="form-control" value="@Model.CategoryViewModel.Name" readonly />
                    <input type="hidden" asp-for="SparePartCategoryId" id="SparePartCategoryId" />
                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#categoryModal">
                        🔍 Search Category
                    </button>
                </div>
                <span asp-validation-for="SparePartCategoryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PartCode" class="control-label"></label>
                <input asp-for="PartCode" class="form-control" />
                <span asp-validation-for="PartCode" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<!-- Category Search Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalLabel">Search Spare Part Categories</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="categorySearchInput" class="form-control" placeholder="Type category name..." />
                <div id="categoryResults" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let debounceTimer;

        document.getElementById("categorySearchInput").addEventListener("input", function () {
            clearTimeout(debounceTimer);

            const term = this.value.trim();
            if (term.length < 2) return;

            debounceTimer = setTimeout(async () => {
                const container = document.getElementById("categoryResults");
                if (!container) return;

                container.innerHTML = `<div class="text-muted">Searching...</div>`;

                try {
                    const response = await fetch(`/SparePart/SearchCategories?term=${encodeURIComponent(term)}`);
                    const results = await response.json();

                    container.innerHTML = "";

                    if (!Array.isArray(results) || results.length === 0) {
                        container.innerHTML = `
                            <div class="alert alert-warning">
                                No categories found matching "<strong>${term}</strong>".
                            </div>`;
                        return;
                    }

                    results.forEach(c => {
                        const btn = document.createElement("button");
                        btn.className = "btn btn-outline-primary mb-2 w-100 text-start";
                        btn.textContent = `${c.name} ${c.description ? `– ${c.description}` : ""}`;
                        btn.onclick = () => {
                            document.getElementById("SparePartCategoryId").value = c.id;
                            document.getElementById("SelectedCategoryName").value = c.name;
                            bootstrap.Modal.getInstance(document.getElementById("categoryModal")).hide();
                        };
                        container.appendChild(btn);
                    });
                } catch (error) {
                    container.innerHTML = `
                        <div class="alert alert-danger">
                            An error occurred while searching. Please try again.
                        </div>`;
                    console.error("SearchCategories error:", error);
                }
            }, 300);
        });
    </script>
}
